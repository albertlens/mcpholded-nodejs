import axios from 'axios';

async function testPagination() {
    console.log('üöÄ Iniciando prueba de paginaci√≥n...\n');

    // Simular conexi√≥n MCP
    const baseURL = 'http://localhost:3000';
    
    try {
        // Primero verificar que el servidor est√© funcionando
        console.log('1Ô∏è‚É£ Verificando estado del servidor...');
        const health = await axios.get(`${baseURL}/health`);
        console.log('‚úÖ Servidor funcionando:', health.data);
        console.log('');

        // Preparar datos de prueba para simular cliente MCP
        const mcpRequest = {
            jsonrpc: "2.0",
            id: 1,
            method: "tools/call",
            params: {
                name: "get_all_contacts",
                arguments: {
                    maxPerPage: 5  // Usar un n√∫mero peque√±o para ver m√∫ltiples p√°ginas
                }
            }
        };

        console.log('2Ô∏è‚É£ Enviando petici√≥n de prueba MCP...');
        console.log('üì¶ Request:', JSON.stringify(mcpRequest, null, 2));
        console.log('');

        // Esta petici√≥n fallar√° por el auth, pero deber√≠amos ver los logs del servidor
        try {
            const response = await axios.post(`${baseURL}/mcp`, mcpRequest, {
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            console.log('‚úÖ Respuesta MCP:', response.data);
        } catch (error) {
            console.log('‚ö†Ô∏è  Error esperado (sin auth):', error.response?.data || error.message);
        }

        console.log('\n3Ô∏è‚É£ Verificar logs del servidor para ver los controles de paginaci√≥n...');
        console.log('üëÄ Los logs deber√≠an mostrar:');
        console.log('   - Request recibido');
        console.log('   - Par√°metros de paginaci√≥n (maxPerPage: 5)');
        console.log('   - Detalles del proceso de paginaci√≥n');

    } catch (error) {
        console.error('‚ùå Error en la prueba:', error.message);
    }
}

testPagination();
